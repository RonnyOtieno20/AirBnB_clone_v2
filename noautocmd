#!/usr/bin/python3


"""Unittest module for the BaseModel Class."""

import unittest
from models.base_model import BaseModel
import datetime
from uuid import UUID
import json
import os


class TestBaseModel(unittest.TestCase):
    """Test Cases for the BaseModel class."""

    def __init__(self, *args, **kwargs):
        """Initialize the test class."""
        super().__init__(*args, **kwargs)
        self.name = "BaseModel"
        self.value = BaseModel

    def setUp(self):
        """Set up test methods."""
        pass

    def tearDown(self):
        """Tear down test methods."""
        try:
            os.remove("file.json")
        except:
            pass

    def test_default(self):
        """Test default instance creation."""
        i = self.value()
        self.assertEqual(type(i), self.value)

    def test_kwargs(self):
        """Test instance creation using kwargs."""
        i = self.value()
        copy = i.to_dict()
        new = BaseModel(**copy)
        self.assertFalse(new is i)

    def test_kwargs_int(self):
        """Test kwargs with int."""
        i = self.value()
        copy = i.to_dict()
        copy.update({1: 2})
        with self.assertRaises(TypeError):
            new = BaseModel(**copy)

    def test_save(self):
        """Test save method."""
        i = self.value()
        i.save()
        key = self.name + "." + i.id
        with open("file.json", "r") as f:
            j = json.load(f)
            self.assertEqual(j[key], i.to_dict())

    def test_str(self):
        """Test __str__ method."""
        i = self.value()
        self.assertEqual(str(i), "[{}] ({}) {}".format(self.name,
                                                       i.id, i.__dict__))

    def test_todict(self):
        """Test to_dict method."""
        i = self.value()
        n = i.to_dict()
        self.assertEqual(i.to_dict(), n)

    def test_kwargs_none(self):
        """Test kwargs with None."""
        n = {None: None}
        with self.assertRaises(TypeError):
            new = self.value(**n)

    def test_kwargs_one(self):
        """Test kwargs with one argument."""
        n = {"Name": "test"}
        with self.assertRaises(KeyError):
            new = self.value(**n)

    def test_id(self):
        """Test id attribute."""
        new = self.value()
        self.assertEqual(type(new.id), str)

    def test_created_at(self):
        """Test created_at attribute."""
        new = self.value()
        self.assertEqual(type(new.created_at), datetime.datetime)

    def test_updated_at(self):
        """Test updated_at attribute."""
        new = self.value()
        self.assertEqual(type(new.updated_at), datetime.datetime)
        n = new.to_dict()
        new = BaseModel(**n)
        self.assertFalse(new.created_at == new.updated_at)

    def test_uuid(self):
        """Test that id is a valid uuid."""
        new = self.value()
        try:
            UUID(new.id)
            self.assertTrue(True)
        except ValueError:
            self.assertTrue(False)

    def test_to_dict_values(self):
        """Test that values in dict returned from to_dict are correct."""
        t_format = "%Y-%m-%dT%H:%M:%S.%f"
        bm = self.value()
        new_d = bm.to_dict()
        self.assertEqual(new_d["__class__"], "BaseModel")
        self.assertEqual(type(new_d["created_at"]), str)
        self.assertEqual(type(new_d["updated_at"]), str)
        self.assertEqual(new_d["created_at"], bm.created_at.strftime(t_format))
        self.assertEqual(new_d["updated_at"], bm.updated_at.strftime(t_format))

    def test_from_dict_basic(self):
        """Test from_dict method."""
        bm = self.value()
        bm_dict = bm.to_dict()
        new_bm = BaseModel(**bm_dict)
        self.assertEqual(new_bm.id, bm.id)
        self.assertEqual(new_bm.created_at, bm.created_at)
        self.assertEqual(new_bm.updated_at, bm.updated_at)

    def test_from_dict_create_datetime(self):
        """Test from_dict with custom datetime."""
        t_format = "%Y-%m-%dT%H:%M:%S.%f"
        bm_dict = {
            "__class__": "BaseModel",
            "id": "56d43177-cc5f-4d6c-a0c1-e167f8c27337",
            "created_at": "2017-09-28T21:03:54.052298",
            "updated_at": "2017-09-28T21:03:54.052302",
        }
        bm = BaseModel(**bm_dict)
        self.assertEqual(bm.id, "56d43177-cc5f-4d6c-a0c1-e167f8c27337")
        self.assertEqual(
            bm.created_at, datetime.datetime.strptime(bm_dict["created_at"], t_format)
        )
        self.assertEqual(
            bm.updated_at, datetime.datetime.strptime(bm_dict["updated_at"], t_format)
        )


if __name__ == "__main__":
    unittest.main()
